[
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Bài viết sẽ hướng dẫn bạn xây dựng một pipeline CI/CD hiệu quả để triển khai một website viết bằng ReactJS. Cho dù bạn là một nhà phát triển tìm kiếm tính tự động hóa, hay một kỹ sư đám mây đang thiết kế giải pháp CI/CD, việc kết hợp các dịch vụ AWS và GitLab sẽ giúp quá trình phát triển hiệu quả và đáng tin cậy hơn nhiều.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Xây dựng Pipeline CI/CD cho Dự án ReactJS trên GitLab bằng Dịch vụ AWS (ECR, Fargate, EC2)",
	"tags": [],
	"description": "",
	"content": "CI/CD Pipeline cho Dự án ReactJS sử dụng Dịch vụ AWS Tổng quan Hoàn thành workshop, bạn sẽ có khả năng thiết lập một pipeline CI/CD cho dự án ReactJS của mình trên GitLab. Kiến trúc của pipeline khá đơn giản, tập trung vào việc sử dụng các dịch vụ phổ biến của AWS như EC2, ECR và ECS. Nếu bạn quan tâm đến việc tìm hiểu thêm về CI/CD, đây là một cơ hội tuyệt vời.\nBắt tay vào làm thôi! 🚀\nNội dung Giới thiệu Kiến trúc Thiết lập ban đầu Cài đặt chính Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.1-whatiscicd/",
	"title": "CI/CD là gì?",
	"tags": [],
	"description": "",
	"content": "CICD là gì? CI/CD Pipeline là một chuỗi các giai đoạn tự động chuyển đổi mã nguồn của bạn thành một website đang chạy.\na. Tích hợp liên tục (CI - Continuous Integration) Thay đổi mã nguồn được tự động kéo từ repository Git của bạn. Các bài kiểm tra đơn vị (unit test), kiểm tra chất lượng mã (code quality check) và kiểm tra tích hợp (integration test) được thực hiện. Nếu thành công, mã nguồn được xây dựng thành một sản phẩm triển khai (deployable artifact). b. Phát hành liên tục (CD - Continuous Delivery) Sản phẩm triển khai được triển khai đến môi trường staging để kiểm tra thủ công và phê duyệt. Sau khi được phê duyệt, sản phẩm triển khai được triển khai đến môi trường sản xuất (production). Kiểm tra hiệu suất và hoạt động được thực hiện liên tục. "
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.2-benefitofcicd/",
	"title": "Lợi ích của CI/CD",
	"tags": [],
	"description": "",
	"content": "Lợi ích của CI/CD Hãy tưởng tượng một ứng dụng mạng xã hội phổ biến đột ngột có lượng người dùng tăng vọt. Nếu không có CI/CD, việc mở rộng quy mô ứng dụng để thích ứng với lưu lượng truy cập tăng cao sẽ liên quan đến việc chỉnh sửa mã nguồn thủ công, kiểm tra và triển khai - một quá trình chậm chạp và dễ xảy ra lỗi. CI/CD tự động hóa quy trình này, cho phép ứng dụng mở rộng quy mô một cách liền mạch và duy trì khả năng phản hồi với nhu cầu của người dùng.\nDưới đây là một số lợi ích chính của CI/CD:\nGiảm thời gian và công sức: Tự động hóa việc xây dựng, kiểm thử và triển khai, giúp tiết kiệm thời gian phát triển quý giá.\nCải thiện chất lượng: Phát hiện và sửa lỗi sớm trong chu kỳ phát triển thông qua các bài kiểm tra tự động.\nCập nhật nhanh hơn: Cung cấp các tính năng mới và bản sửa lỗi cho người dùng nhanh chóng và hiệu quả.\nNâng cao bảo mật: Tự động hóa quét bảo mật để xác định và khắc phục lỗ hổng sớm.\nCải thiện hợp tác trong công việc: Thúc đẩy quy trình làm việc hiệu quả cho các nhóm phát triển.\nHãy sẵn sàng để khám phá thế giới thú vị của CI/CD cho trang web ReactJS của bạn!\n"
},
{
	"uri": "//localhost:1313/vi/2-architecture/",
	"title": "Kiến trúc",
	"tags": [],
	"description": "",
	"content": "Kiến trúc Hãy cùng xem qua kiến trúc của chúng ta.\n"
},
{
	"uri": "//localhost:1313/vi/2-architecture/2.1-designsolution/",
	"title": "Thiết kế Giải pháp CI/CD",
	"tags": [],
	"description": "",
	"content": "Thiết kế một Giải pháp CI/CD Kiến trúc mô tả quy trình CI/CD cho dự án của bạn được lưu trữ trên GitLab, CI/CD pipeline được định nghĩa thông qua file .gitlab-ci.yml.\nCác giai đoạn trong CI/CD pipeline: Xây dựng (Build): Giai đoạn này tập trung vào việc xây dựng dự án từ mã nguồn trên GitLab. Đẩy (Push): Giai đoạn này liên quan đến việc tạo container image dựa trên đầu ra của quá trình build và đẩy nó vào Elastic Container Registry (ECR). Triển khai (Deploy): Giai đoạn này cập nhật Elastic Container Service (ECS) service của bạn với container image mới được tạo từ ECR. Môi trường thực thi công việc: Các công việc CI/CD sẽ được thực hiện trên một máy chủ Elastic Compute Cloud (EC2) đã đăng ký làm GitLab Runner. Thiết lập này cho phép GitLab giao việc thực thi cho máy chủ EC2.\nCách hoạt động? Người dùng commit mã vào repository GitLab. GitLab phát hiện các thay đổi và chạy quy trình CI/CD (quy trình được định nghĩa trong tệp .gitlab-ci.yml). GitLab Runner xây dựng dự án từ mã nguồn. Sau khi xây dựng hoàn tất, GitLab Runner tạo container image và đẩy image lên ECR. Sau khi image được đẩy lên ECR, GitLab Runner chạy giai đoạn triển khai, cập nhật dịch vụ ECS với phiên bản mới nhất của container image. Dịch vụ hoàn thành và phiên bản mới của trang web được phát hành. "
},
{
	"uri": "//localhost:1313/vi/2-architecture/2.2-understandresources/",
	"title": "Tìm hiểu về các tài nguyên trong kiến trúc này",
	"tags": [],
	"description": "",
	"content": "Elastic Compute Cloud (EC2) Dịch vụ AWS này cung cấp các máy chủ ảo có khả năng mở rộng (các EC2 instances) trên cloud. GitLab Runner của bạn sẽ được cài đặt trên một EC2 instance, cho phép GitLab giao việc thực thi CI/CD.\nElastic Container Registry Dịch vụ AWS này hoạt động như một kho lưu trữ an toàn cho container image của bạn. Bạn sẽ đẩy container image được xây dựng trong quy trình CI/CD vào kho ECR của bạn.\nElastic Container Service Dịch vụ AWS này cung cấp một nền tảng để chạy và quản lý các ứng dụng được đóng gói trong container. Bạn sẽ sử dụng ECS để triển khai ứng dụng web của bạn sau khi cập nhật với container image mới được tạo từ ECR.\nGitLab Nền tảng này là hệ thống quản lý phiên bản mã nguồn cho dự án của bạn. Nó lưu trữ một cách an toàn mã nguồn của bạn và theo dõi các thay đổi theo thời gian.\n.gitlab-ci.yml Tệp YAML này xác định các giai đoạn và nhiệm vụ cụ thể trong quy trình CI/CD của bạn, chỉ định các hành động cần thực hiện ở mỗi giai đoạn.\n"
},
{
	"uri": "//localhost:1313/vi/3-prerequisites/",
	"title": "Thiết lập ban đầu",
	"tags": [],
	"description": "",
	"content": "Thiết lập ban đầu Bạn cần một Virtual Private Cloud (VPC) để chạy các dịch vụ AWS bên trong nó. Việc đặt các dịch vụ của bạn bên trong VPC sẽ đảm bảo tính bảo mật, đồng thời bạn cũng có thể thực hiện các phương án như cài đặt Security Group (SG) hay Network Access Control List (NACL) để bảo vệ các tài nguyên của mình.\nĐồng thời, một số dịch vụ như Elastic Compute Cloud (EC2), Elastic Container Service (ECS) sẽ yêu cầu bạn đặt những dịch vụ này vào trong 1 VPC.\nNote: Tất nhiên bạn có thể xài VPC mặt định, nhưng tôi khuyến khích bạn tạo 1 VPC mới, bởi vì mỗi VPC nên chỉ được sử dụng cho một mục đích riêng (việc bạn đặt tất cả dịch vụ của mình vào trong VPC mặc định sẽ khiến cho việc quản lý VPC của bạn trở nên khó khăn về sau này).\n"
},
{
	"uri": "//localhost:1313/vi/3-prerequisites/3.1-createvpc/",
	"title": "Tạo VPC",
	"tags": [],
	"description": "",
	"content": "Bước 1. Truy cập VPC Dashboard Truy cập VPC Dashboard thông qua đường link này : VPC Dashboard. Sau đó nháy chuột chọn Create VPC.\nStep 2. Chọn CIDR block Để đơn giản hơn trong quá trình setup VPC, tôi khuyên bạn nên chọn Resource to create là VPC and more. Nó chứa các template cần thiết cho 1 VPC hoàn chỉnh như subnet, route table, internet gateway, endpoint,\u0026hellip; sẽ giúp cho bạn tạo VPC dễ dàng hơn nhiều.\n"
},
{
	"uri": "//localhost:1313/vi/4-mainsettings/",
	"title": "Main Settings",
	"tags": [],
	"description": "",
	"content": "AWS Services Here is some AWS services you will use in your CI/CD pipeline: EC2, ECR, ECS\nGitLab Beside, my project now is on GitLab environment, and I need to set up the project before I can deploy its resources to AWS.\n"
},
{
	"uri": "//localhost:1313/vi/4-mainsettings/4.1-setupgitlabproject/",
	"title": "Setup GitLab Project",
	"tags": [],
	"description": "",
	"content": "Define CI/CD pipeline with .gitlab-ci.yml Specifies the base image used for all jobs in the pipeline. Here, it\u0026rsquo;s node:18-alpine, a lightweight Node.js 18 image based on Alpine Linux.\nimage: node:18-alpine Defines three stages for the pipeline: build, push, and deploy. Jobs will run sequentially within each stage, and stages can be configured to run in parallel.\nstages:\r- build\r- push\r- deploy Runs a sequence of commands before any job:\nInstalls Python 3 and its package manager pip using apk package manager. Creates a virtual environment for awscli using python3 -m venv. Activates the virtual environment and installs awscli for interacting with AWS. Configures AWS credentials using environment variables $AWS_ACCESS_KEY_ID and $AWS_SECRET_ACCESS_KEY. before_script:\r- apk add --no-cache python3 py3-pip\r- apk add --no-cache docker\r- python3 -m venv /tmp/awscli-venv\r- source /tmp/awscli-venv/bin/activate\r- pip install awscli\r- aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID\r- aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY Defines a job named build in the build stage:\nInstalls dependencies using yarn install. Runs CI=false yarn build to build the project, likely using a build tool like Webpack or Rollup. Setting CI=false will ignore warning in build step. Saves the built artifacts in the build directory for later use. build:\rstage: build\rscript:\r- yarn install\r- CI=false yarn build\rartifacts:\rpaths:\r- build/ Defines a job named push in the push stage:\nDepends on the successful completion of the build job (dependencies: - build). Uses a different image, docker:latest, which provides necessary tools for building and pushing Docker images. Uses a Docker service (docker:dind) to run Docker commands within the job itself. Authenticates with Amazon ECR (Elastic Container Registry) using AWS CLI commands, retrieving login credentials from the environment variable $AWS_ACCESS_KEY_ID and secret. Creates a simple Dockerfile that copies the built artifacts (build/) to the image and configures Nginx server to serve them. Builds and tags the image with the commit SHA for versioning using $CI_COMMIT_SHA environment variable. Pushes the image to the specified ECR repository. push:\rstage: push\rdependencies:\r- build\rimage: docker:latest\rservices:\r- docker:dind\rscript:\r# Login to ECR using AWS CLI\r- aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/$ECR_HASH\r# Build and push Docker image\r- echo -e \u0026#34;FROM nginx:alpine\\nCOPY build/ /usr/share/nginx/html\u0026#34; \u0026gt; Dockerfile\r- echo -e \u0026#34;server {\\n\\tlisten 80;\\n\\tlocation / {\\n\\t\\troot /usr/share/nginx/html;\\n\\t\\tindex index.html index.htm;\\n\\t\\ttry_files \\$uri \\$uri/ /index.html;\\n\\t}\\n\\terror_page 404 =200 /index.html;\\n}\u0026#34; \u0026gt; default.conf\r- echo -e \u0026#34;COPY default.conf /etc/nginx/conf.d/default.conf\u0026#34; \u0026gt;\u0026gt; Dockerfile\r- docker build -t \u0026lt;IMAGE_NAME\u0026gt;:$CI_COMMIT_SHA .\r- docker tag \u0026lt;IMAGE_NAME\u0026gt;:$CI_COMMIT_SHA public.ecr.aws/$ECR_HASH/\u0026lt;IMAGE_NAME\u0026gt;:$CI_COMMIT_SHA\r- docker push public.ecr.aws/$ECR_HASH/\u0026lt;IMAGE_NAME\u0026gt;:$CI_COMMIT_SHA Defines a job named deploy in the deploy stage:\nUses AWS CLI to update an ECS (Elastic Container Service) service with a new task definition. This likely deploys the newly built image to the running container instances. Only runs this job when the pipeline is triggered by the prod branch or tag. deploy:\rstage: deploy\rscript:\r- aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $ECS_TASK_DEFINITION_ARN --desired-count 1 --force-new-deployment\ronly:\r- prod Add project variables Here is some variables need to add: AWS_ACCESS_KEY_ID: Your AWS access key ID for interacting with AWS services.\nAWS_SECRET_ACCESS_KEY: Your AWS secret access key for interacting with AWS services.\nECS_CLUSTER_NAME: The name of your ECS cluster where the service is deployed.\nECS_SERVICE_NAME: The name of the ECS service you want to update.\nECS_TASK_DEFINITION_ARN: The ARN (Amazon Resource Name) of the task definition associated with the service.\nPlease note this names! Later, when we complete creation of AWS resources, we will back to add a value for these variables.\nSteps to add variables: Step 1: Go to your project\u0026rsquo;s Settings \u0026gt; CI/CD \u0026gt; Variables.\nStep 2: Click Add variable and fill in the details.\nCreate GitLab Runner What is GitLab Runner? Think of GitLab Runner as a robot that follows your instructions in your GitLab CI/CD pipelines. It can run tests, build your application, and deploy it to production, all automatically\nIn this workshop, we\u0026rsquo;ll delve into the practical deployment of GitLab Runner on an EC2 instance running Linux\nSteps to create a GitLab Runner: Step 1: Go to your project in GitLab and open the Settings tab.\nStep 2: Under the CI/CD section, expand the Runners section.\nStep 3: Click New project runner.\nStep 4: Select your operating system where you installed the GitLab Runner. Then enter details:\nTags: you can give a tag here, then later you can set to run CI/CD pipeline on only tags you specified. Description (optional): Add a note for future reference. Configuration: Establish rules such as preventing the runner from accepting new jobs, allowing only the protected branch to run the CI/CD pipeline, restricting the use of the current runner to the current project only, and setting a maximum job timeout. Step 5: Click Create runner. This will create a runner for your project.\nPlease note the GITLAB_REGISTRATION_TOKEN (GitLab registration token), you will use this value to connect the GitLab runner from your EC2 instance.\n"
},
{
	"uri": "//localhost:1313/vi/4-mainsettings/4.2-createecrrepository/",
	"title": "Create ECR Repository",
	"tags": [],
	"description": "",
	"content": "Create ECR Repository Step 1. Go to ECR Dashboard Navigate to ECR dashboard at this link: ECR Dashboard. Then click to Get Started.\nStep 2. Choose repository type For easier steps, I will choose Public repository in General settings.\nIf you choosing Private type, you must be authenticate before can pull the image from repository. Just add some line to authenticate with AWS in .gitlab-ci.yml if you want to pull image from private ECR repository.\nStep 3. Enter a unique name for your repository Enter a name for your repository.\nStep 3. Complete creation Click Create repository to complete creation.\nAfter complete creation, you will get repository name and URI. Please note this value, because your need to add this value to variable $ECR_HASH of your GitLab Variables.\n"
},
{
	"uri": "//localhost:1313/vi/4-mainsettings/4.3-defineecstask/",
	"title": "Define ECS Task",
	"tags": [],
	"description": "",
	"content": "Create ECS Task Definition Step 1. Go to ECS Dashboard Navigate to ECS dashboard at this link: ECS Dashboard. Then click to Task definition.\nStep 2. Start to create Task Definition There are 2 options:\nIf you have previous defined task definition, you can use as JSON template.\nI want to create a new Task Definition, so I choose Create new task definition.\nStep 3. Configure infrastructure Now you need to specify some attribute for your task:\nLaunch Type: If you want AWS manage underlying infrastructure for you, choose Fargate. Otherwise, choose EC2 if you want to manage infrastructure by your self.\nOS: You can choose between Linux, or Windows.\nChoose CPU and Memory for your task.\nRole: If you want your ECS Task can interact with other AWS services, then you can specify a Role here, or create a new one.\nStep 4. Link ECS task definition with ECR repository Name: name of container that will run your task, it can be anything.\nImage URI: is the URI of ECR repository you create previously. ex: repo-uri/\u0026lt;IMAGE_NAME\u0026gt;:.\nRemember the values in your .gitlab-ci.yml file? Here is what to use that value, make sure they are same:\n- docker build -t \u0026lt;IMAGE_NAME\u0026gt;:$CI_COMMIT_SHA .\r- docker tag \u0026lt;IMAGE_NAME\u0026gt;:$CI_COMMIT_SHA public.ecr.aws/$ECR_HASH/\u0026lt;IMAGE_NAME\u0026gt;:$CI_COMMIT_SHA\r- docker push public.ecr.aws/$ECR_HASH/\u0026lt;IMAGE_NAME\u0026gt;:$CI_COMMIT_SHA Next, mapping port of your container with port of image will use. In my case, they will be 80 to 80.\nStep 5. Complete creation Click Create to create ECS Task definition.\n"
},
{
	"uri": "//localhost:1313/vi/4-mainsettings/4.4-createecscluster/",
	"title": "Create ECS Cluster",
	"tags": [],
	"description": "",
	"content": "Create ECS Cluster Step 1. Go to ECS Dashboard Navigate to ECS dashboard at this link: ECS Dashboard. Then click to Cluster.\nStep 2. Start to create Cluster Click to Create Cluster button.\nStep 3. Set a name for your cluster Enter a unique name for your cluster.\nStep 4. Choose infrastructure I choose Fargate in this case because I don\u0026rsquo;t want to manage servers. And remember, you choosed Fargate for your Task definition before.\nStep 5. Complete creation Click Create to create ECS cluster.\nCreate ECS Service Step 1: Go to Clusters Click to cluster that you want to create service. Then you will go to cluster detail page.\nStep 2: Start to create service In cluster detail page, scroll down to Services section. Then Click to Create button.\nStep 3: Config service environment I want to create a simple guide for you to start with ECS. So I choose Launch type.\nThe keys differences:\nLaunch type: If development simplicity and cost-effectiveness are your priorities, using a launch type (Fargate or EC2, depending on your preference) might be sufficient.\nCapacity provider strategy: If you need precise resource allocation, advanced scaling, and potentially cost optimization, employing a capacity provider strategy is a better option.\nStep 4: Config for deployment Application type:\nService type is more suitable if you want to host a website.\nTask type is more suitable if you want to run batch job.\nAs I discuss ealier, we will hosting a website by ECS, so Service is a great choice here.\nTask definition:\nChoose the task definition that you have created in previous steps.\nService Name\nGive a unique name for your service.\nStep 5: Choose a number of tasks Enter a number that specify the tasks you want to run.\nStep 6: Configure VPC Choose the VPC you created in prerequisites section, then choose the public subnets to run service.\nStep 6: Configure Security Group (SG) Create a new SG to protect your resource, but still open necessary port to allow user access your website. I open port 80 for my website.\nStep 7: Complete creation Click Create button to create ECS service.\n"
},
{
	"uri": "//localhost:1313/vi/4-mainsettings/4.5-createec2forgitlabrunner/",
	"title": "Create EC2 for GitLab Runner",
	"tags": [],
	"description": "",
	"content": "Create EC2 instance Step 1. Go to EC2 Dashboard Navigate to EC2 dashboard at this link: EC2 Dashboard. Then click to Instances.\nStep 2. Start to create EC2 instance Click Launch instance to create an instance.\nStep 3. Enter a name to instance Enter a unique name for your EC2 instance.\nStep 4: Choose Amazon machine image (AMI) Depend on your usage, and OS, you can choose whatever instance you like. For lower cost, I use Linux, and it offers Amazon Linux 2 for free tier.\nStep 5: Choose instance type I choose t2.micro for my instance type, if you use more CPU and RAM, you need a larger instance type here.\nStep 6: Create key pair If you want to access your instance via local SSH like your local CMD or Powershell, you can create a key here and use later. In my case, I will connect to my instance directly via AWS Console so I choose Proceed without a key pair.\nStep 7: Choose VPC Choose the VPC you created earlier, then using public subnets to help you access instance via its public IP.\nStep 8: Config Security Group To protect your instance, you can restrict access to your instance by SG. Here I allow SSH from anywhere, but you can restrict access to allow SSH from your IP address only.\nStep 9: Add User Data User Data is the script that will run at first time when you instance is starting. I use will it to connect to my GitLab Runner.\nExpand the Advance settings, then scroll down to bottom you will see User Data input box.\nPlease copy this script and paste to you User Data.\nsudo su - root\rcurl -L --output /usr/local/bin/gitlab-runner \u0026#34;https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64\u0026#34;\rchmod +x /usr/local/bin/gitlab-runner\ruseradd --comment \u0026#39;GitLab Runner\u0026#39; --create-home gitlab-runner --shell /bin/bash\rgitlab-runner install --user=\u0026lt;GITLAB_USER_NAME\u0026gt; --working-directory=/home/gitlab-runner\rgitlab-runner start\ryum install -y docker\ryum install -y git\rsystemctl enable docker\rsystemctl start docker\rgitlab-runner register -n --url \u0026lt;GITLAB_URL\u0026gt; --registration-token \u0026lt;GITLAB_REGISTRATION_TOKEN\u0026gt; --executor docker --description \u0026#34;Deployment Runner\u0026#34; --docker-image \u0026#34;docker:stable\u0026#34; --tag-list deployment --docker-privileged\rgitlab-runner run This script sets up a GitLab Runner on a Linux system. It downloads the runner software, creates a dedicated user for it, and configures it to use Docker to run jobs from your GitLab server.\nStep 10: Complete creation Click Launch instance to start your EC2 instance.\n"
},
{
	"uri": "//localhost:1313/vi/4-mainsettings/4.6-connectec2withgitlabrunner/",
	"title": "Connect EC2 with GitLab Runner",
	"tags": [],
	"description": "",
	"content": "Your instance look good but in build phase, but in push phase maybe you will get this error:\nERROR: Cannot connect to the Docker daemon at tcp://docker:2375. Is the docker daemon running?\rERROR: Job failed: exit code 1 Look back our push phase:\npush:\rstage: push\rdependencies:\r- build\rimage: docker:latest\rservices:\r- docker:dind\rscript:\r# Login to ECR using AWS CLI\r- aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/$ECR_HASH\r# Build and push Docker image\r- echo -e \u0026#34;FROM nginx:alpine\\nCOPY build/ /usr/share/nginx/html\u0026#34; \u0026gt; Dockerfile\r- echo -e \u0026#34;server {\\n\\tlisten 80;\\n\\tlocation / {\\n\\t\\troot /usr/share/nginx/html;\\n\\t\\tindex index.html index.htm;\\n\\t\\ttry_files \\$uri \\$uri/ /index.html;\\n\\t}\\n\\terror_page 404 =200 /index.html;\\n}\u0026#34; \u0026gt; default.conf\r- echo -e \u0026#34;COPY default.conf /etc/nginx/conf.d/default.conf\u0026#34; \u0026gt;\u0026gt; Dockerfile\r- docker build -t \u0026lt;IMAGE_NAME\u0026gt;:$CI_COMMIT_SHA .\r- docker tag \u0026lt;IMAGE_NAME\u0026gt;:$CI_COMMIT_SHA public.ecr.aws/$ECR_HASH/\u0026lt;IMAGE_NAME\u0026gt;:$CI_COMMIT_SHA\r- docker push public.ecr.aws/$ECR_HASH/\u0026lt;IMAGE_NAME\u0026gt;:$CI_COMMIT_SHA Problem due to the push phase might encounter an error due to a potential incompatibility between the Docker image used for running tasks (docker:latest) and the Docker image being built, tagged, and pushed (nginx:alpine ).\nBecause the two Docker images might not share the necessary Docker environment for building and pushing images.\nThe solution is mount the volumes of the two Docker images together to ensure they share a consistent Docker environment.\nStep 1: Go to Instances In EC2 dashboard, click Instances in left sidebar to go to instance page.\nStep 2: Connect to EC2 instance Select the instance you want to connect, then click Connect button.\nStep 3: Choose intance connect type I will use EC2 instance connect via AWS console. Then click Connect to continue.\nNow you can see the Linux terminal\nStep 4: Mount docker volume To mount docker volume, enter following scripts:\nsudo su - root\rsudo nano /etc/gitlab-runner/config.toml Scroll down and find the line of volume, then add /var/run/docker.sock:/var/run/docker.sock in the array. It will look like this:\nStep 5: Check GitLab Runner status Back to your GitLab project and check if the GitLab runner status is running.\nOkay, now you completed all setup. Now let see our result!\n"
},
{
	"uri": "//localhost:1313/vi/4-mainsettings/4.7-result/",
	"title": "Result",
	"tags": [],
	"description": "",
	"content": "Result Check if your GiLab pipeline complete in both 3 phase Check if your Cluster static is active, and service is active Check if your website is deployed You can go to task detail page, find the public IP address that given to your task.\n"
},
{
	"uri": "//localhost:1313/vi/5-cleanup/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "Here is some service need to cleanup Delete EC2 instance (Instance connect to your GitLab Runner) Back to EC2 Dashboard, go to Instances from left sidebar and delete.\nDelete ECR repository Back to ECR Dashboard, go to Repositories from left sidebar and delete.\nDelete ECS Cluster Back to ECS Dashboard, delete your task and service first, then delete your cluster.\nDelete ECS Task definition Back to ECS Dashboard, go to Task definition from left sidebar and delete.\nDelete NAT Gateway Back to your VPC, go to NAT Gateway from left sidebar and delete.\nDelete S3 Endpoint Back to your VPC, go to Endpoints from left sidebar and delete.\nDelete Elastic IP Back to your VPC, go to Elastic IPs from left sidebar and delete.\nDelete Elstic Network Interface (ENI) Back to EC2 Dashboard, go to Network Interface and delete.\nDelete VPC Back to your VPC, select the VPC you want to delete and delete.\n🎉 Everything is done. Hope you have a good experience with this workshop!\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]